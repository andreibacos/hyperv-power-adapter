diff -uNr a/etc/maas/templates/power/hyperv.template b/etc/maas/templates/power/hyperv.template
--- a/etc/maas/templates/power/hyperv.template	1970-01-01 02:00:00.000000000 +0200
+++ b/etc/maas/templates/power/hyperv.template	2015-03-21 14:26:56.666497600 +0200
@@ -0,0 +1,40 @@
+# -*- mode: shell-script -*-
+#
+# Control virtual system's "power" through Hyper-V.
+#
+
+power_change={{power_change}}
+power_address={{power_address}}
+power_user={{power_user}}
+power_pass={{power_pass}}
+vm_name={{power_id}}
+wsmancmd="{{config_dir}}/wsmancmd.py"
+
+formulate_power_command() {
+    if [ ${power_change} = 'on' ]
+    then
+        echo '(Set-VMFirmware '${vm_name}' -BootOrder (Get-VMNetworkAdapter '${vm_name}')); (Start-VM '${vm_name}')'
+    else
+        echo '(Stop-VM -TurnOff -Force -Confirm:$false '${vm_name}')'
+    fi
+}
+
+issue_hyperv_command() {
+    ${wsmancmd} -H $power_address -s -a basic -u $power_user -p $power_pass "powershell.exe -Command $1"
+}
+
+if [ ${power_change} = "query" ]
+then
+    STATUS=$(issue_hyperv_command "(Get-VM ${vm_name}).State")
+    [ -z "$STATUS" ] && echo "Failed to get power state for ${vm_name}" && exit 1
+    case "$STATUS" in
+        Off*)
+            echo "off";;
+        *)
+            echo "on";;
+    esac
+else
+    COMMAND=$(formulate_power_command)
+    issue_hyperv_command "$COMMAND"
+fi
+
diff -uNr a/etc/maas/templates/power/wsmancmd.py b/etc/maas/templates/power/wsmancmd.py
--- a/etc/maas/templates/power/wsmancmd.py	1970-01-01 02:00:00.000000000 +0200
+++ b/etc/maas/templates/power/wsmancmd.py	2015-03-21 13:25:17.280924400 +0200
@@ -0,0 +1,170 @@
+#!/usr/bin/env python
+
+# Copyright 2013 Cloudbase Solutions Srl
+# All Rights Reserved.
+#
+#    Licensed under the Apache License, Version 2.0 (the "License"); you may
+#    not use this file except in compliance with the License. You may obtain
+#    a copy of the License at
+#
+#         http://www.apache.org/licenses/LICENSE-2.0
+#
+#    Unless required by applicable law or agreed to in writing, software
+#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+#    License for the specific language governing permissions and limitations
+#    under the License.
+
+import getopt
+import sys
+
+from winrm import protocol
+
+
+AUTH_BASIC = "basic"
+AUTH_KERBEROS = "kerberos"
+AUTH_CERTIFICATE = "certificate"
+
+DEFAULT_PORT_HTTP = 5985
+DEFAULT_PORT_HTTPS = 5986
+
+def print_usage():
+    print ("%s [-U <url>] [-H <host>] [-P <port>] [-s] "
+           "[-a <basic|kerberos|certificate>] "
+           "[-u <username>] [-p <password>] "
+           "[-c <client_cert_pem> -k <client_cert_cert_key_pem>] "
+           "<cmd> [cmd_args]" % sys.argv[0])
+
+
+def parse_args():
+    args_ok = False
+    auth = AUTH_BASIC
+    username = None
+    password = None
+    url = None
+    host = None
+    port = None
+    use_ssl = False
+    cmd = None
+    cert_pem = None
+    cert_key_pem = None
+    is_powershell_cmd = False
+
+    try:
+        show_usage = False
+        opts, args = getopt.getopt(sys.argv[1:], "hsU:H:P:u:p:c:k:a:",
+                                   "powershell")
+        for opt, arg in opts:
+            if opt == "-h":
+                show_usage = True
+            if opt == "-s":
+                use_ssl = True
+            if opt == "-H":
+                host = arg
+            if opt == "-P":
+                port = arg
+            if opt == "-U":
+                url = arg
+            elif opt == "-a":
+                auth = arg
+            elif opt == "-u":
+                username = arg
+            elif opt == "-p":
+                password = arg
+            elif opt == "-c":
+                cert_pem = arg
+            elif opt == "-k":
+                cert_key_pem = arg
+            elif opt == "--powershell":
+                is_powershell_cmd = True
+
+        cmd = args
+
+        if (show_usage or not
+                (cmd and
+                 (url and not host and not port and not use_ssl) or
+                  host and ((bool(port) ^ bool(use_ssl) or
+                            not port and not use_ssl)) and
+                 (auth == AUTH_BASIC and username and password or
+                  auth == AUTH_CERTIFICATE and cert_pem and cert_key_pem or
+                  auth == AUTH_KERBEROS))):
+            print_usage()
+        else:
+            args_ok = True
+
+    except getopt.GetoptError:
+        print_usage()
+
+    return (args_ok, url, host, use_ssl, port, auth, username, password,
+            cert_pem, cert_key_pem, cmd, is_powershell_cmd)
+
+
+def run_wsman_cmd(url, auth, username, password, cert_pem, cert_key_pem, cmd):
+    protocol.Protocol.DEFAULT_TIMEOUT = "PT3600S"
+
+    if not auth:
+        auth = AUTH_BASIC
+
+    auth_transport_map = {AUTH_BASIC: 'plaintext',
+                          AUTH_KERBEROS: 'kerberos',
+                          AUTH_CERTIFICATE: 'ssl'}
+
+    p = protocol.Protocol(endpoint=url,
+                          transport=auth_transport_map[auth],
+                          username=username,
+                          password=password,
+                          cert_pem=cert_pem,
+                          cert_key_pem=cert_key_pem)
+
+    shell_id = p.open_shell()
+
+    command_id = p.run_command(shell_id, cmd[0], cmd[1:])
+    std_out, std_err, status_code = p.get_command_output(shell_id, command_id)
+
+    p.cleanup_command(shell_id, command_id)
+    p.close_shell(shell_id)
+
+    return (std_out, std_err, status_code)
+
+
+def get_url(url, host, use_ssl, port):
+    if url:
+        return url
+    else:
+        if not port:
+            if use_ssl:
+                port = DEFAULT_PORT_HTTPS
+            else:
+                port = DEFAULT_PORT_HTTP
+
+        if use_ssl:
+            protocol = "https"
+        else:
+            protocol = "http"
+
+        return ("%(protocol)s://%(host)s:%(port)s/wsman" % locals())
+
+
+def main():
+    exit_code = 1
+
+    (args_ok, url, host, use_ssl, port, auth, username, password,
+     cert_pem, cert_key_pem, cmd, is_powershell_cmd) = parse_args()
+    if args_ok:
+        url = get_url(url, host, use_ssl, port)
+
+        if is_powershell_cmd:
+            cmd = ["powershell.exe", "-ExecutionPolicy", "RemoteSigned",
+                   "-NonInteractive", "-Command"] + cmd
+
+        std_out, std_err, exit_code = run_wsman_cmd(url, auth, username,
+                                                    password, cert_pem,
+                                                    cert_key_pem, cmd)
+        sys.stdout.write(std_out)
+        sys.stderr.write(std_err)
+
+    sys.exit(exit_code)
+
+
+if __name__ == "__main__":
+    main()
diff -uNr a/usr/lib/python2.7/dist-packages/provisioningserver/power_schema.py b/usr/lib/python2.7/dist-packages/provisioningserver/power_schema.py
--- a/usr/lib/python2.7/dist-packages/provisioningserver/power_schema.py	2015-01-30 13:57:10.000000000 +0200
+++ b/usr/lib/python2.7/dist-packages/provisioningserver/power_schema.py	2015-03-21 13:44:26.718497600 +0200
@@ -174,6 +174,16 @@
         ],
     },
     {
+        'name': 'hyperv',
+        'description': 'Hyper-V server (virtual systems)',
+        'fields': [
+            make_json_field('power_address', "Power address"),
+            make_json_field('power_id', "Power ID"),
+            make_json_field('power_user', "Power user"),
+            make_json_field('power_pass', "Power password"),
+        ],
+    },
+    {
         'name': 'fence_cdu',
         'description': 'Sentry Switch CDU',
         'fields': [
diff -uNr a/usr/lib/python2.7/dist-packages/provisioningserver/rpc/power.py b/usr/lib/python2.7/dist-packages/provisioningserver/rpc/power.py
--- a/usr/lib/python2.7/dist-packages/provisioningserver/rpc/power.py  2015-11-28 19:43:34.609105900 +0200
+++ b/usr/lib/python2.7/dist-packages/provisioningserver/rpc/power.py  2015-11-28 18:36:50.770076700 +0200
@@ -75,6 +75,7 @@
     'ucsm',
     'virsh',
     'vmware',
+    'hyperv',
 ]


